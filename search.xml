<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>12-css预处理器</title>
      <link href="/2023/09/03/12-css-yu-chu-li-qi"/>
      <url>/2023/09/03/12-css-yu-chu-li-qi</url>
      
        <content type="html"><![CDATA[<h2 id="CSS-预处理器"><a href="#CSS-预处理器" class="headerlink" title="CSS 预处理器"></a>CSS 预处理器</h2><p>首先，为什么要学习CSS预处理器呢？CSS预处理器是一种将CSS代码转化为浏览器可识别的CSS语言的工具，它可以简化CSS的编写过程，提高CSS代码的可读性和可维护性。CSS预处理器可以让开发者使用变量、嵌套、Mixin（混合）和函数等高级CSS特性，以及更方便地处理CSS文件。</p><p>常见的CSS预处理器有Sass、Less和Stylus等。其中，Sass是最为流行的一种预处理器，它具有简洁、灵活、易于使用的特点，并且具有庞大的社区支持。因此，我们可以选择学习Sass作为我们的第一步。</p><p>在学习Sass之前，我们需要安装Sass的编译器。Sass有两种编译方式：一种是通过命令行编译，另一种是通过图形界面编译器。这里我们介绍一下通过命令行编译的方式。</p><h3 id="Sass官网"><a href="#Sass官网" class="headerlink" title="Sass官网"></a>Sass官网</h3><p>Sass 官网 <a href="https://www.sass.hk/docs/">Sass中文网</a>。</p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>11-css关键帧动画</title>
      <link href="/2023/09/03/11-css-guan-jian-zheng-dong-hua"/>
      <url>/2023/09/03/11-css-guan-jian-zheng-dong-hua</url>
      
        <content type="html"><![CDATA[<h2 id="CSS-关键帧动画"><a href="#CSS-关键帧动画" class="headerlink" title="CSS 关键帧动画"></a>CSS 关键帧动画</h2><blockquote><p>学习CSS关键帧动画可以让网页更加生动、有趣、富有表现力。通过CSS关键帧动画，我们可以实现各种动态效果，比如旋转、弹跳、摇摆等，同时也能够增加用户对网页的交互性和体验感。</p></blockquote><p>这部分重点内容包括：</p><p>1、@keyframes规则：用来定义关键帧动画，指定动画在不同时间点的状态，例如起始状态、结束状态、以及中间状态等。</p><p>2、animation属性：用来设置动画的属性，包括动画名称、动画持续时间、动画延迟时间、动画播放次数、动画方向、以及是否暂停等。</p><p>3、animation-timing-function属性：用来设置动画的时间函数，控制动画的速度变化，可以实现不同的动画效果。</p><p>下面是一个简单的CSS关键帧动画示例：</p><pre class=" language-highlight HTML"><code class="language-highlight HTML"><span class="meta"><!DOCTYPE <span class="keyword">html</span>></span><span class="tag"><<span class="name">html</span>></span>  <span class="tag"><<span class="name">head</span>></span>    <span class="tag"><<span class="name">style</span>></span><span class="language-css"></span><span class="language-css">      <span class="comment">/* 定义关键帧动画 */</span></span><span class="language-css">      <span class="keyword">@keyframes</span> myAnimation {</span><span class="language-css">        <span class="selector-tag">from</span> {<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>);}</span><span class="language-css">        <span class="selector-tag">to</span> {<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>);}</span><span class="language-css">      }</span><span class="language-css">      </span><span class="language-css">      <span class="comment">/* 设置元素动画属性 */</span></span><span class="language-css">      <span class="selector-tag">div</span> {</span><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span><span class="language-css">        <span class="attribute">background-color</span>: red;</span><span class="language-css">        <span class="attribute">animation-name</span>: myAnimation;</span><span class="language-css">        <span class="attribute">animation-duration</span>: <span class="number">3s</span>;</span><span class="language-css">        <span class="attribute">animation-iteration-count</span>: infinite;</span><span class="language-css">        <span class="attribute">animation-timing-function</span>: ease-in-out;</span><span class="language-css">      }</span><span class="language-css">    </span><span class="tag"></<span class="name">style</span>></span>  <span class="tag"></<span class="name">head</span>></span>  <span class="tag"><<span class="name">body</span>></span>    <span class="tag"><<span class="name">div</span>></span><span class="tag"></<span class="name">div</span>></span>  <span class="tag"></<span class="name">body</span>></span><span class="tag"></<span class="name">html</span>></span></code></pre><p>当你准备使用CSS关键帧动画时，可以按照以下步骤进行操作：</p><ol><li>在CSS样式表中，使用@keyframes规则定义动画的关键帧。关键帧定义了动画的状态，并且可以包含多个关键帧，每个关键帧都有其自己的CSS样式。 例如，以下代码定义了一个简单的关键帧动画，让一个方形从左到右移动：</li></ol><pre class=" language-highlight CSS"><code class="language-highlight CSS"><span class="keyword">@keyframes</span> move {  <span class="number">0%</span> {    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">0</span>);  }  <span class="number">100%</span> {    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">200px</span>);  }}</code></pre><ol start="2"><li>为要应用动画的元素添加CSS样式，并将动画名称和持续时间指定为属性值。 例如，以下代码为一个<div>元素应用了上面定义的move动画，并指定了持续时间为3秒：</div></li></ol><pre class=" language-highlight CSS"><code class="language-highlight CSS"><span class="selector-tag">div</span> {  <span class="attribute">animation-name</span>: move;  <span class="attribute">animation-duration</span>: <span class="number">3s</span>;}</code></pre><ol start="3"><li>（可选）为动画指定其他属性，例如重复次数和缓动效果。 例如，以下代码将动画重复播放3次，并且使用ease-in-out缓动效果：</li></ol><pre class=" language-highlight CSS"><code class="language-highlight CSS"><span class="selector-tag">div</span> {  <span class="attribute">animation-name</span>: move;  <span class="attribute">animation-duration</span>: <span class="number">3s</span>;  <span class="attribute">animation-iteration-count</span>: <span class="number">3</span>;  <span class="attribute">animation-timing-function</span>: ease-in-out;}</code></pre><p>最终，以下是一个完整的CSS关键帧动画示例代码，它会让一个方形元素从左到右移动并且颜色变化：</p><pre class=" language-highlight HTML"><code class="language-highlight HTML"><span class="meta"><!DOCTYPE <span class="keyword">html</span>></span><span class="tag"><<span class="name">html</span>></span><span class="tag"><<span class="name">head</span>></span>  <span class="tag"><<span class="name">title</span>></span>CSS Animation Example<span class="tag"></<span class="name">title</span>></span>  <span class="tag"><<span class="name">style</span>></span><span class="language-css"></span><span class="language-css">    <span class="keyword">@keyframes</span> move-and-color {</span><span class="language-css">      <span class="number">0%</span> {</span><span class="language-css">        <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">0</span>);</span><span class="language-css">        <span class="attribute">background-color</span>: red;</span><span class="language-css">      }</span><span class="language-css">      <span class="number">50%</span> {</span><span class="language-css">        <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">200px</span>);</span><span class="language-css">        <span class="attribute">background-color</span>: blue;</span><span class="language-css">      }</span><span class="language-css">      <span class="number">100%</span> {</span><span class="language-css">        <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">400px</span>);</span><span class="language-css">        <span class="attribute">background-color</span>: green;</span><span class="language-css">      }</span><span class="language-css">    }</span><span class="language-css">    <span class="selector-tag">div</span> {</span><span class="language-css">      <span class="attribute">width</span>: <span class="number">100px</span>;</span><span class="language-css">      <span class="attribute">height</span>: <span class="number">100px</span>;</span><span class="language-css">      <span class="attribute">background-color</span>: red;</span><span class="language-css">      <span class="attribute">animation-name</span>: move-and-color;</span><span class="language-css">      <span class="attribute">animation-duration</span>: <span class="number">3s</span>;</span><span class="language-css">      <span class="attribute">animation-iteration-count</span>: infinite;</span><span class="language-css">      <span class="attribute">animation-timing-function</span>: ease-in-out;</span><span class="language-css">    }</span><span class="language-css">  </span><span class="tag"></<span class="name">style</span>></span><span class="tag"></<span class="name">head</span>></span><span class="tag"><<span class="name">body</span>></span>  <span class="tag"><<span class="name">div</span>></span><span class="tag"></<span class="name">div</span>></span><span class="tag"></<span class="name">body</span>></span><span class="tag"></<span class="name">html</span>></span></code></pre><blockquote><p>在上述代码中，@keyframes规则定义了一个名为move-and-color的关键帧动画，该动画在0%、50%和100%三个关键帧分别定义了方块的位置和颜色。div元素应用了这个动画，并指定了持续时间为3秒，重复次数为无限，缓动效果为ease-in-out。最终的效果是，方块会从左到右移动，颜色也会随着移动而改变。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10-css渐变transform</title>
      <link href="/2023/09/03/10-css-jian-bian-transform"/>
      <url>/2023/09/03/10-css-jian-bian-transform</url>
      
        <content type="html"><![CDATA[<h2 id="CSS-渐变transform"><a href="#CSS-渐变transform" class="headerlink" title="CSS 渐变transform"></a>CSS 渐变transform</h2><blockquote><p>CSS 变形（Transform）和渐变（Gradient）是 CSS 中的两个重要概念。Transform 可以改变元素的位置、大小和形状，而 Gradient可以让元素的颜色变得更加丰富和生动。这两个概念在实现网页动画和交互效果中非常常用，因此学习它们对于 CSS 开发者来说非常重要。</p></blockquote><h3 id="重点掌握的内容"><a href="#重点掌握的内容" class="headerlink" title="重点掌握的内容"></a>重点掌握的内容</h3><p>1.了解 Transform 属性的常用方法和用法，能够实现元素的平移、旋转、缩放和扭曲等效果。</p><p>2.了解渐变的两种类型及其用法，能够实现各种颜色过渡效果。</p><p>3.掌握在 CSS 中使用过渡和动画的方法，能够实现复杂的交互动画效果。</p><p>4.了解响应式设计的概念</p><h3 id="一、Transform"><a href="#一、Transform" class="headerlink" title="一、Transform"></a>一、Transform</h3><p>Transform 属性用来改变元素的形状、大小、位置等。常见的 Transform 属性包括：</p><p>1.平移（translate）：改变元素的位置，常用于制作元素移动的动画效果。</p><p>2.旋转（rotate）：将元素沿着指定的轴进行旋转，常用于制作旋转木马等效果。</p><p>3.缩放（scale）：将元素沿着指定的轴进行缩放，常用于制作元素变大或变小的效果。</p><p>4.扭曲（skew）：将元素进行扭曲，使其不再是一个矩形或正方形。</p><p>下面是一些使用 Transform 属性的示例：</p><pre class=" language-highlight CSS"><code class="language-highlight CSS"><span class="comment">/* 平移 */</span><span class="selector-class">.box</span> {  <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">50px</span>, <span class="number">50px</span>);}<span class="comment">/* 旋转 */</span><span class="selector-class">.box</span> {  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">45deg</span>);}<span class="comment">/* 缩放 */</span><span class="selector-class">.box</span> {  <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">2</span>, <span class="number">2</span>);}<span class="comment">/* 扭曲 */</span><span class="selector-class">.box</span> {  <span class="attribute">transform</span>: <span class="built_in">skew</span>(<span class="number">30deg</span>, <span class="number">20deg</span>);}</code></pre><h3 id="二、渐变"><a href="#二、渐变" class="headerlink" title="二、渐变"></a>二、渐变</h3><blockquote><p>渐变（Gradient）是一种可以让元素的颜色变得更加丰富和生动的方法。CSS 提供了两种类型的渐变：线性渐变（Linear Gradient）和径向渐变（Radial Gradient）。</p></blockquote><blockquote><p>线性渐变是沿着一条线从一种颜色过渡到另一种颜色的过程，常用于制作背景图案和过渡效果。径向渐变是从中心点开始向四周辐射出去的渐变，常用于制作渐变按钮等效果。</p></blockquote><p>下面是一些使用渐变的示例：</p><pre class=" language-highlight CSS"><code class="language-highlight CSS"><span class="comment">/* 线性渐变 */</span><span class="selector-class">.box</span> {  <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(to right, red, orange, yellow, green, blue, purple);}<span class="comment">/* 径向渐变 */</span><span class="selector-class">.box</span> {  <span class="attribute">background</span>: <span class="built_in">radial-gradient</span>(circle at center, red, orange, yellow, green, blue, purple);}</code></pre>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>9-css过渡transition</title>
      <link href="/2023/09/03/9-css-guo-du-transition"/>
      <url>/2023/09/03/9-css-guo-du-transition</url>
      
        <content type="html"><![CDATA[<h2 id="CSS-过渡transition"><a href="#CSS-过渡transition" class="headerlink" title="CSS 过渡transition"></a>CSS 过渡transition</h2><blockquote><p>CSS 过渡（transition）是一种用于控制元素从一种样式逐渐转变为另一种样式的动画效果。学习 CSS 过渡可以帮助你为网页添加更加生动、直观的动画效果，从而提升用户的交互体验和视觉体验。</p></blockquote><p>举个例子，当用户鼠标悬停在一个元素上时，你可以通过 CSS 过渡来实现元素背景颜色逐渐变化的效果，让用户更加直观地感受到元素被选中的状态。CSS 过渡的另一个优点是它的实现非常简单，只需要少量的 CSS 代码就可以实现较为复杂的动画效果。</p><p>CSS 过渡是一种让元素从一种状态过渡到另一种状态的效果。它可以用于在鼠标悬停、单击等事件触发时，让元素平滑地从一种样式变化到另一种样式，增强页面的交互性。</p><p>CSS 过渡通过指定要改变的属性及其变化的时间来实现动画效果。下面是一个简单的示例：</p><pre class=" language-highlight HTML"><code class="language-highlight HTML"><span class="meta"><!DOCTYPE <span class="keyword">html</span>></span><span class="tag"><<span class="name">html</span>></span><span class="tag"><<span class="name">head</span>></span><span class="tag"><<span class="name">style</span>></span><span class="language-css"></span><span class="language-css"><span class="selector-class">.box</span> {</span><span class="language-css"><span class="attribute">width</span>: <span class="number">100px</span>;</span><span class="language-css"><span class="attribute">height</span>: <span class="number">100px</span>;</span><span class="language-css"><span class="attribute">background-color</span>: red;</span><span class="language-css"><span class="attribute">transition</span>: width <span class="number">2s</span>;</span><span class="language-css">}</span><span class="language-css"></span><span class="language-css"><span class="selector-class">.box</span><span class="selector-pseudo">:hover</span> {</span><span class="language-css"><span class="attribute">width</span>: <span class="number">200px</span>;</span><span class="language-css">}</span><span class="language-css"></span><span class="tag"></<span class="name">style</span>></span><span class="tag"></<span class="name">head</span>></span><span class="tag"><<span class="name">body</span>></span><span class="tag"><<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>></span><span class="tag"></<span class="name">div</span>></span><span class="tag"></<span class="name">body</span>></span><span class="tag"></<span class="name">html</span>></span></code></pre><blockquote><p>上面的代码定义了一个 box 类，设置了它的宽度为 100px，背景颜色为红色，并定义了一个 transition 属性，指定当宽度改变时，过渡时间为 2s。当鼠标悬停在 .box 元素上时，将宽度变为 200px，这时就会出现平滑的过渡效果。</p></blockquote><blockquote><p>可以看到，CSS 过渡的基本语法非常简单，只需设置要变化的属性及其变化的时间即可。通过调整 transition 的时间和属性，可以实现不同的动画效果。</p></blockquote><blockquote><p>值得注意的是，CSS 过渡只能实现单向的动画效果，即只能在元素从一个状态到另一个状态时才会触发，无法在状态变化后再次触发。如果需要实现循环动画效果，则需要使用 CSS 动画。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8-css媒体查询与响应式</title>
      <link href="/2023/09/03/8-css-mei-ti-cha-xun-yu-xiang-ying-shi"/>
      <url>/2023/09/03/8-css-mei-ti-cha-xun-yu-xiang-ying-shi</url>
      
        <content type="html"><![CDATA[<h2 id="CSS-媒体查询与响应式"><a href="#CSS-媒体查询与响应式" class="headerlink" title="CSS 媒体查询与响应式"></a>CSS 媒体查询与响应式</h2><h3 id="CSS媒体查询"><a href="#CSS媒体查询" class="headerlink" title="CSS媒体查询"></a>CSS媒体查询</h3><blockquote><p>CSS媒体查询是CSS3新增的一个功能，用于根据设备特性和视口尺寸来为不同的设备和屏幕大小应用不同的样式。通过使用媒体查询，我们可以针对不同设备分别设置样式，以便为不同设备提供最佳的用户体验。</p></blockquote><blockquote><p>媒体查询可以在CSS文件中定义，使用@media关键字和一个条件列表来指定一组样式规则。媒体查询可以包含多个条件，这些条件可以组合使用，以便根据需要设置样式。以下是一个简单的媒体查询示例：</p></blockquote><pre class=" language-highlight CSS"><code class="language-highlight CSS"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">600px</span>) {  <span class="selector-tag">body</span> {    <span class="attribute">background-color</span>: lightblue;  }}</code></pre><blockquote><p>上面的代码表示，在屏幕宽度小于或等于600像素时，将body元素的背景色设置为浅蓝色。其中，@media screen表示只在屏幕上应用这个样式，(max-width: 600px)表示屏幕宽度不超过600像素时应用这个样式。</p></blockquote><h3 id="响应式设计"><a href="#响应式设计" class="headerlink" title="响应式设计"></a>响应式设计</h3><blockquote><p>响应式设计是指网站或应用程序可以自适应不同的设备和屏幕大小，以提供最佳的用户体验。通过使用媒体查询和其他CSS技术，我们可以创建响应式布局，使网站能够适应不同屏幕大小和方向。</p></blockquote><p>以下是一个简单的响应式布局示例，使用媒体查询和flexbox布局：</p><pre class=" language-highlight CSS"><code class="language-highlight CSS"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">600px</span>) {  <span class="selector-class">.container</span> {    <span class="attribute">display</span>: flex;    <span class="attribute">flex-direction</span>: column;  }  <span class="selector-class">.item</span> {    <span class="attribute">width</span>: <span class="number">100%</span>;  }}<span class="selector-class">.container</span> {  <span class="attribute">display</span>: flex;  <span class="attribute">flex-wrap</span>: wrap;}<span class="selector-class">.item</span> {  <span class="attribute">flex</span>: <span class="number">1</span>;  <span class="attribute">min-width</span>: <span class="number">300px</span>;  <span class="attribute">margin</span>: <span class="number">10px</span>;}</code></pre><blockquote><p>上面的代码表示，在屏幕宽度小于或等于600像素时，将.container元素的布局设置为垂直方向，并将.item元素的宽度设置为100%。在屏幕宽度大于600像素时，将.container元素的布局设置为水平方向，使用flex-wrap属性实现自动换行，将.item元素的宽度设置为固定值，并使用flex属性实现自适应布局。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7-cssFlex与Grid布局</title>
      <link href="/2023/09/03/7-cssflex-yu-grid-bu-ju"/>
      <url>/2023/09/03/7-cssflex-yu-grid-bu-ju</url>
      
        <content type="html"><![CDATA[<h2 id="CSS-Flex与Grid布局"><a href="#CSS-Flex与Grid布局" class="headerlink" title="CSS Flex与Grid布局"></a>CSS Flex与Grid布局</h2><h3 id="Flex-布局"><a href="#Flex-布局" class="headerlink" title="Flex 布局"></a>Flex 布局</h3><blockquote><p>Flex 布局是一种基于弹性盒子模型的布局方式，它能够让容器内的元素按照一定的规则自适应地伸缩和排列。使用 Flex 布局可以方便地实现复杂的页面布局，而且代码简洁、可维护性高。</p></blockquote><h3 id="Flex-容器"><a href="#Flex-容器" class="headerlink" title="Flex 容器"></a>Flex 容器</h3><blockquote><p>Flex 布局是通过设置容器的样式来控制子元素的布局的。要将一个容器设置为 Flex 布局，可以使用 display: flex; 属性。</p></blockquote><pre class=" language-highlight CSS"><code class="language-highlight CSS"><span class="selector-class">.container</span> {  <span class="attribute">display</span>: flex;}</code></pre><h3 id="Flex-子元素"><a href="#Flex-子元素" class="headerlink" title="Flex 子元素"></a>Flex 子元素</h3><blockquote><p>Flex 布局中的子元素称为 Flex 项目，每个项目都可以拥有自己的属性和样式。可以使用 flex 属性来控制项目的大小和位置。</p></blockquote><pre class=" language-highlight CSS"><code class="language-highlight CSS"><span class="selector-class">.item</span> {  <span class="attribute">flex</span>: <span class="number">1</span>;}</code></pre><h3 id="Flex-布局示例"><a href="#Flex-布局示例" class="headerlink" title="Flex 布局示例"></a>Flex 布局示例</h3><p>下面是一个简单的使用 Flex 布局的示例，它实现了一个基本的导航栏布局：</p><pre class=" language-highlight CSS"><code class="language-highlight CSS"><<span class="selector-tag">div</span> class="<span class="selector-tag">nav</span>">  <<span class="selector-tag">a</span> href="#">首页</<span class="selector-tag">a</span>>  <<span class="selector-tag">a</span> href="#">关于</<span class="selector-tag">a</span>>  <<span class="selector-tag">a</span> href="#">联系我们</<span class="selector-tag">a</span>></<span class="selector-tag">div</span>><span class="selector-class">.nav</span> {  <span class="attribute">display</span>: flex;  <span class="attribute">justify-content</span>: space-between;  <span class="attribute">align-items</span>: center;}<span class="selector-class">.nav</span> <span class="selector-tag">a</span> {  <span class="attribute">margin-right</span>: <span class="number">20px</span>;}</code></pre><blockquote><p>在这个示例中，我们将 nav 容器设置为 Flex 布局，并使用 justify-content 属性来使项目在容器内水平分布，并使用 align-items 属性来使项目在容器内垂直居中。我们还使用了 margin-right 属性来为链接之间添加一定的间距。</p></blockquote><h3 id="Grid-布局"><a href="#Grid-布局" class="headerlink" title="Grid 布局"></a>Grid 布局</h3><blockquote><p>Grid 布局是一种基于网格的布局方式，它可以使容器内的元素按照列和行来排列，非常适合于制作响应式页面。使用 Grid 布局可以方便地实现复杂的页面布局，而且代码简洁、可维护性高。</p></blockquote><h3 id="Grid-容器"><a href="#Grid-容器" class="headerlink" title="Grid 容器"></a>Grid 容器</h3><blockquote><p>Grid 布局同样是通过设置容器的样式来控制子元素的布局的。要将一个容器设置为 Grid 布局，可以使用 display: grid; 属性。</p></blockquote><pre class=" language-highlight CSS"><code class="language-highlight CSS"><span class="selector-class">.container</span> {  <span class="attribute">display</span>: grid;}</code></pre><h3 id="Grid-子元素"><a href="#Grid-子元素" class="headerlink" title="Grid 子元素"></a>Grid 子元素</h3><blockquote><p>Grid 布局中的子元素称为 Grid 项目，每个项目都可以拥有自己的属性和样式。可以使用 grid-column 和 grid-row 属性来控制项目的大小和位置。</p></blockquote><pre class=" language-highlight CSS"><code class="language-highlight CSS"><span class="selector-class">.item</span> {  <span class="attribute">grid-column</span>: <span class="number">1</span> / <span class="number">3</span>;  <span class="attribute">grid-row</span>: <span class="number">1</span> / <span class="number">2</span>;}</code></pre><h3 id="Grid-布局示例"><a href="#Grid-布局示例" class="headerlink" title="Grid 布局示例"></a>Grid 布局示例</h3><p>下面是一个简单的使用 Grid 布局的示例代码：</p><pre class=" language-highlight CSS"><code class="language-highlight CSS"><<span class="selector-tag">div</span> class="container">  <<span class="selector-tag">div</span> class="box box1"><span class="number">1</span></<span class="selector-tag">div</span>>  <<span class="selector-tag">div</span> class="box box2"><span class="number">2</span></<span class="selector-tag">div</span>>  <<span class="selector-tag">div</span> class="box box3"><span class="number">3</span></<span class="selector-tag">div</span>>  <<span class="selector-tag">div</span> class="box box4"><span class="number">4</span></<span class="selector-tag">div</span>>  <<span class="selector-tag">div</span> class="box box5"><span class="number">5</span></<span class="selector-tag">div</span>>  <<span class="selector-tag">div</span> class="box box6"><span class="number">6</span></<span class="selector-tag">div</span>></<span class="selector-tag">div</span>><span class="selector-class">.container</span> {  <span class="attribute">display</span>: grid;  <span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr <span class="number">1</span>fr <span class="number">1</span>fr;  <span class="attribute">grid-gap</span>: <span class="number">10px</span>;}<span class="selector-class">.box</span> {  <span class="attribute">background-color</span>: <span class="number">#ccc</span>;  <span class="attribute">padding</span>: <span class="number">10px</span>;  <span class="attribute">text-align</span>: center;}<span class="selector-class">.box1</span> {  <span class="attribute">grid-column</span>: <span class="number">1</span> / <span class="number">3</span>;  <span class="attribute">grid-row</span>: <span class="number">1</span> / <span class="number">4</span>;}<span class="selector-class">.box2</span> {  <span class="attribute">grid-column</span>: <span class="number">3</span> / <span class="number">4</span>;  <span class="attribute">grid-row</span>: <span class="number">1</span> / <span class="number">3</span>;}<span class="selector-class">.box3</span> {  <span class="attribute">grid-column</span>: <span class="number">2</span> / <span class="number">4</span>;  <span class="attribute">grid-row</span>: <span class="number">3</span> / <span class="number">4</span>;}<span class="selector-class">.box4</span> {  <span class="attribute">grid-column</span>: <span class="number">1</span> / <span class="number">2</span>;  <span class="attribute">grid-row</span>: <span class="number">4</span> / <span class="number">5</span>;}<span class="selector-class">.box5</span> {  <span class="attribute">grid-column</span>: <span class="number">2</span> / <span class="number">3</span>;  <span class="attribute">grid-row</span>: <span class="number">4</span> / <span class="number">5</span>;}<span class="selector-class">.box6</span> {  <span class="attribute">grid-column</span>: <span class="number">3</span> / <span class="number">4</span>;  <span class="attribute">grid-row</span>: <span class="number">4</span> / <span class="number">5</span>;}</code></pre><blockquote><p>这是一个使用了 Grid 布局的简单示例。我们首先在父元素 .container 上设置了 display: grid;，表示这个元素的子元素将使用 Grid 布局排列。然后，我们使用 grid-template-columns 属性来定义列的大小，这里我们设置了三列，每列大小相等。我们也可以设置每列的大小不同。</p></blockquote><blockquote><p>接着，我们使用 grid-gap 属性来设置子元素之间的间距，这里我们设置了 10px。</p></blockquote><blockquote><p>最后，我们在子元素中分别使用 grid-column 和 grid-row 属性来定义子元素的位置。这里的 grid-column 和 grid-row 属性使用了 起始行 / 结束行 或 起始列 / 结束列 的方式来定义，比如 .box1 的位置就是在第 1 行到第 3 行、第 1 列到第 3 列。我们可以使用这种方式来精确地控制子元素的位置和大小。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6-css伪类与伪元素</title>
      <link href="/2023/09/03/6-css-wei-lei-yu-wei-yuan-su"/>
      <url>/2023/09/03/6-css-wei-lei-yu-wei-yuan-su</url>
      
        <content type="html"><![CDATA[<h2 id="CSS伪类与伪元素"><a href="#CSS伪类与伪元素" class="headerlink" title="CSS伪类与伪元素"></a>CSS伪类与伪元素</h2><p>在CSS中，伪类和伪元素是用来对文档中的特定部分进行样式化的一种方式。它们可以根据元素的状态或者文档结构来选择元素，并对其应用样式。</p><h3 id="伪类（pseudo-class）"><a href="#伪类（pseudo-class）" class="headerlink" title="伪类（pseudo-class）"></a>伪类（pseudo-class）</h3><blockquote><p>伪类是CSS中一个重要的概念。它是用来描述一个元素在特定状态下的样式，例如鼠标悬停、被点击、被选中等。</p></blockquote><p>下面是一些常见的伪类及其用法：</p><ul><li>:hover 用来描述鼠标悬停时的样式。</li><li>:active 用来描述鼠标点击元素并且还没有释放时的样式。</li><li>:focus 用来描述元素获取焦点时的样式。</li><li>:visited 用来描述已经被访问过的链接的样式。</li><li>:nth-child() 用来选择某个元素的子元素中特定的元素。</li><li>:first-child 用来选择某个元素的第一个子元素。</li><li>:last-child 用来选择某个元素的最后一个子元素。</li><li>:not() 用来选择所有不符合指定选择器的元素。</li></ul><pre class=" language-highlight CSS"><code class="language-highlight CSS"><span class="comment">/* 鼠标悬停时改变字体颜色 */</span><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> {  <span class="attribute">color</span>: red;}<span class="comment">/* 元素被选中时添加背景颜色 */</span><span class="selector-tag">input</span><span class="selector-pseudo">:checked</span> {  <span class="attribute">background-color</span>: <span class="number">#ccc</span>;}<span class="comment">/* 选择第一个段落并添加样式 */</span><span class="selector-tag">p</span><span class="selector-pseudo">:first</span>-child {  <span class="attribute">font-weight</span>: bold;}<span class="comment">/* 选择第二个li元素并添加样式 */</span><span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>) {  <span class="attribute">background-color</span>: yellow;}<span class="comment">/* 选择所有不是段落的元素 */</span><span class="selector-pseudo">:not</span>(<span class="selector-tag">p</span>) {  <span class="attribute">color</span>: blue;}</code></pre><h3 id="伪元素（pseudo-element）"><a href="#伪元素（pseudo-element）" class="headerlink" title="伪元素（pseudo-element）"></a>伪元素（pseudo-element）</h3><blockquote><p>伪元素是用来在某些元素的内容前或者后添加特定样式的一种方式。它们在CSS中以::开头，并且它们可以描述元素的特定部分，例如元素的第一行、第一个字符、最后一个字符等。</p></blockquote><p>下面是一些常见的伪元素及其用法：</p><ul><li>::before 用来在元素内容前面添加样式。</li><li>::after 用来在元素内容后面添加样式。</li><li>::first-line 用来选择元素的第一行并添加样式。</li><li>::first-letter 用来选择元素的第一个字符并添加样式。</li></ul><p>下面是一些示例：</p><pre class=" language-highlight HTML"><code class="language-highlight HTML"><span class="meta"><!DOCTYPE <span class="keyword">html</span>></span><span class="tag"><<span class="name">html</span>></span><span class="tag"><<span class="name">head</span>></span><span class="tag"><<span class="name">title</span>></span>CSS样式演示<span class="tag"></<span class="name">title</span>></span><span class="tag"><<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>></span><span class="language-css"></span><span class="language-css"><span class="comment">/* 选择所有段落并添加样式 */</span></span><span class="language-css"><span class="selector-tag">p</span> {</span><span class="language-css"><span class="attribute">color</span>: blue;</span><span class="language-css"><span class="attribute">font-size</span>: <span class="number">18px</span>;</span><span class="language-css">}</span><span class="language-css"></span><span class="language-css"><span class="comment">/* 选择段落的第一行并添加样式 */</span></span><span class="language-css"><span class="selector-tag">p</span><span class="selector-pseudo">:first</span>-line {</span><span class="language-css"><span class="attribute">font-weight</span>: bold;</span><span class="language-css"><span class="attribute">text-transform</span>: uppercase;</span><span class="language-css">}</span><span class="language-css"></span><span class="language-css"><span class="comment">/* 选择段落中的链接并添加样式 */</span></span><span class="language-css"><span class="selector-tag">p</span> <span class="selector-tag">a</span> {</span><span class="language-css"><span class="attribute">color</span>: red;</span><span class="language-css"><span class="attribute">text-decoration</span>: underline;</span><span class="language-css">}</span><span class="language-css"></span><span class="language-css"><span class="comment">/* 选择段落中已访问过的链接并添加样式 */</span></span><span class="language-css"><span class="selector-tag">p</span> <span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> {</span><span class="language-css"><span class="attribute">color</span>: purple;</span><span class="language-css">}</span><span class="language-css"></span><span class="language-css"><span class="comment">/* 选择段落中鼠标悬停在链接上的状态并添加样式 */</span></span><span class="language-css"><span class="selector-tag">p</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> {</span><span class="language-css"><span class="attribute">background-color</span>: yellow;</span><span class="language-css">}</span><span class="language-css"></span><span class="language-css"><span class="comment">/* 选择段落中的第一个字母并添加样式 */</span></span><span class="language-css"><span class="selector-tag">p</span><span class="selector-pseudo">:first</span>-letter {</span><span class="language-css"><span class="attribute">font-size</span>: <span class="number">24px</span>;</span><span class="language-css"><span class="attribute">color</span>: green;</span><span class="language-css">}</span><span class="language-css"></span><span class="language-css"><span class="comment">/* 选择段落中最后一个字母并添加样式 */</span></span><span class="language-css"><span class="selector-tag">p</span>:last-letter {</span><span class="language-css"><span class="attribute">color</span>: orange;</span><span class="language-css"><span class="attribute">font-size</span>: <span class="number">24px</span>;</span><span class="language-css">}</span><span class="language-css"></span><span class="tag"></<span class="name">style</span>></span><span class="tag"></<span class="name">head</span>></span><span class="tag"><<span class="name">body</span>></span><span class="tag"><<span class="name">p</span>></span><span class="tag"><<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>></span>这是一个链接<span class="tag"></<span class="name">a</span>></span> 这是一个普通的段落，其中包含一些文字和一个链接。<span class="tag"></<span class="name">p</span>></span><span class="tag"><<span class="name">p</span>></span>这是另一个段落，其中也包含一些文字和一个链接。<span class="tag"></<span class="name">p</span>></span><span class="tag"></<span class="name">body</span>></span><span class="tag"></<span class="name">html</span>></span></code></pre><p>以上代码实现了以下样式：</p><ul><li>选择所有段落并添加蓝色字体和18px的字体大小。</li><li>选择每个段落的第一行并添加粗体字体和大写文本格式。</li><li>选择段落中的链接并添加红色字体和带下划线的文本装饰。</li><li>选择段落中已访问过的链接并添加紫色字体。</li><li>选择段落中鼠标悬停在链接上的状态并添加黄色背景色。</li><li>选择每个段落的第一个字母并添加绿色字体和24px的字体大小。</li><li>选择每个段落的最后一个字母并添加橙色字体和24px的字体大小。</li></ul>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5-css视觉格式化模型</title>
      <link href="/2023/09/03/5-css-shi-jue-ge-shi-hua-mo-xing"/>
      <url>/2023/09/03/5-css-shi-jue-ge-shi-hua-mo-xing</url>
      
        <content type="html"><![CDATA[<h2 id="CSS视觉格式化模型"><a href="#CSS视觉格式化模型" class="headerlink" title="CSS视觉格式化模型"></a>CSS视觉格式化模型</h2><blockquote><p>CSS视觉格式化模型（CSS Visual Formatting Model）是指当浏览器渲染页面时，如何计算并呈现HTML元素的大小、位置、边框、内边距和外边距等视觉属性的一种计算机制。</p></blockquote><p>这个模型描述了每个HTML元素如何被渲染成屏幕上的可见元素。理解这个模型对于开发人员来说非常重要，因为它能够帮助我们设计和实现精美的页面布局。</p><p>CSS视觉格式化模型主要包括两个部分：</p><blockquote><p>盒模型（Box Model）：每个HTML元素都被看作是一个矩形盒子，由四个区域组成：<strong>内容区域、内边距区域、边框区域和外边距区域</strong>。CSS可以控制每个区域的大小、颜色、边框样式等属性。例如，我们可以使用下面的CSS代码来定义一个元素的盒模型：</p></blockquote><pre class=" language-highlight CSS"><code class="language-highlight CSS"><span class="selector-tag">div</span> {  <span class="attribute">width</span>: <span class="number">200px</span>; <span class="comment">/* 宽度 */</span>  <span class="attribute">height</span>: <span class="number">100px</span>; <span class="comment">/* 高度 */</span>  <span class="attribute">padding</span>: <span class="number">10px</span>; <span class="comment">/* 内边距 */</span>  <span class="attribute">border</span>: <span class="number">1px</span> solid black; <span class="comment">/* 边框 */</span>  <span class="attribute">margin</span>: <span class="number">20px</span>; <span class="comment">/* 外边距 */</span>}</code></pre><blockquote><p>布局模型（Layout Model）：指定元素在页面上的位置和大小。CSS布局模型使用了<strong>流、定位、浮动和层叠等概念</strong>。元素的布局方式由其<strong>position属性的值</strong>来决定，可以是<strong>static、relative、absolute和fixed</strong>等。例如，我们可以使用下面的CSS代码来设置一个元素的位置和大小：</p></blockquote><pre class=" language-highlight CSS"><code class="language-highlight CSS"><span class="selector-tag">div</span> {  <span class="attribute">position</span>: absolute; <span class="comment">/* 定位 */</span>  <span class="attribute">top</span>: <span class="number">100px</span>; <span class="comment">/* 上边距 */</span>  <span class="attribute">left</span>: <span class="number">200px</span>; <span class="comment">/* 左边距 */</span>  <span class="attribute">width</span>: <span class="number">200px</span>; <span class="comment">/* 宽度 */</span>  <span class="attribute">height</span>: <span class="number">100px</span>; <span class="comment">/* 高度 */</span>}</code></pre><p>这些CSS属性的值将决定元素在页面上的实际位置和大小。</p><p>CSS视觉格式化模型非常重要，因为它可以帮助我们设计和实现具有吸引力的页面布局。</p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4-css属性值</title>
      <link href="/2023/09/03/4-css-shu-xing-zhi"/>
      <url>/2023/09/03/4-css-shu-xing-zhi</url>
      
        <content type="html"><![CDATA[<h2 id="CSS属性值"><a href="#CSS属性值" class="headerlink" title="CSS属性值"></a>CSS属性值</h2><p>使用CSS样式表定义属性值时，属性值的计算机制是很重要的。CSS属性值的计算机制可以分为两类：继承性和层叠性。</p><p>1、继承性</p><blockquote><p>CSS中有些属性的值是可以被继承的，这意味着父元素的某些属性值会被子元素继承。例如，当在body元素中定义了一个字体大小时，所有子元素的字体大小将自动继承该值，除非子元素自己定义了一个新的值来覆盖继承的值。这些属性值被称为“可继承属性”。</p></blockquote><p>2、层叠性</p><blockquote><p>层叠性是指当多个样式规则应用于同一个元素时，这些规则将如何相互影响。CSS的层叠性机制通过“优先级”来解决这个问题，优先级是根据样式规则的选择器和关键字来计算的。如果两个规则具有相同的优先级，则后面的规则将覆盖前面的规则。</p></blockquote><p>需要注意的是，CSS样式表中的规则并不一定按照书写顺序来应用，而是根据规则的特定优先级来应用。</p><p>以下是一个CSS属性值计算机制的示例：</p><pre class=" language-highlight CSS"><code class="language-highlight CSS"><span class="selector-class">.container</span> {  <span class="attribute">width</span>: <span class="number">80%</span>;  <span class="attribute">margin</span>: <span class="number">0</span> auto;}<span class="selector-class">.box</span> {  <span class="attribute">width</span>: <span class="number">50%</span>;  <span class="attribute">padding</span>: <span class="number">20px</span>;  <span class="attribute">border</span>: <span class="number">1px</span> solid black;} <<span class="selector-tag">div</span> class="container">  <<span class="selector-tag">div</span> class="box">Box <span class="number">1</span></<span class="selector-tag">div</span>>  <<span class="selector-tag">div</span> class="box">Box <span class="number">2</span></<span class="selector-tag">div</span>></<span class="selector-tag">div</span>> </code></pre><blockquote><p>首先，我们计算.container的宽度。由于width属性值为80%，而容器的父级元素（假设是body）的宽度为100%，因此.container的宽度为80%乘以父级元素的宽度。如果父级元素的宽度为1200px，那么.container的宽度就是960px。</p></blockquote><blockquote><p>然后，我们计算.box的宽度。由于width属性值为50%，而.box的父级元素是.container，其宽度已经确定为960px，因此.box的宽度为50%乘以父级元素的宽度，也就是480px。</p></blockquote><blockquote><p>接下来，我们计算.box的内边距和边框宽度。.box的内边距为20px，边框宽度为1px。因此，每个盒子的宽度将变为480px + 20px * 2 + 1px * 2，即522px。</p></blockquote><blockquote><p>最后，我们将两个.box元素的宽度相加，再加上它们之间的空白间距。假设空白间距为20px，则两个盒子的总宽度为1044px。由于容器的宽度为960px，因此两个盒子将不会水平排列，而是会自动换行。</p></blockquote><blockquote><p>这就是CSS属性值计算机制的基本原理。通过计算每个元素的具体尺寸和位置，浏览器可以在页面中正确地排列元素。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3-css背景</title>
      <link href="/2023/09/03/3-css-bei-jing"/>
      <url>/2023/09/03/3-css-bei-jing</url>
      
        <content type="html"><![CDATA[<h2 id="CSS背景"><a href="#CSS背景" class="headerlink" title="CSS背景"></a>CSS背景</h2><p>设置 CSS 背景时，我们可以使用以下属性：</p><ul><li>background-color：设置背景颜色</li><li>background-image：设置背景图像</li><li>background-repeat：设置背景图像的重复方式</li><li>background-position：设置背景图像的位置</li><li>background-attachment：设置背景图像是否随着页面滚动</li></ul><p>下面是一些使用这些属性的示例：</p><pre class=" language-highlight CSS"><code class="language-highlight CSS"><span class="comment">/* 设置背景颜色 */</span><span class="selector-tag">body</span> {  <span class="attribute">background-color</span>: <span class="number">#f5f5f5</span>;}<span class="comment">/* 设置背景图像 */</span><span class="selector-tag">div</span> {  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">"background.jpg"</span>);}<span class="comment">/* 设置背景图像的重复方式 */</span><span class="selector-tag">div</span> {  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">"background.jpg"</span>);  <span class="attribute">background-repeat</span>: no-repeat;}<span class="comment">/* 设置背景图像的位置 */</span><span class="selector-tag">div</span> {  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">"background.jpg"</span>);  <span class="attribute">background-position</span>: center;}<span class="comment">/* 设置背景图像是否随着页面滚动 */</span><span class="selector-tag">div</span> {  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">"background.jpg"</span>);  <span class="attribute">background-attachment</span>: fixed;}</code></pre><p>CSS背景属性还有一些其他常用的属性：</p><blockquote><p>background-image：用于设置背景图片，可以设置一个或多个背景图像，多个背景图像之间用逗号分隔。如果指定了多个背景图像，那么第一个图像位于最上面，最后一个图像位于最下面。</p></blockquote><pre class=" language-highlight CSS"><code class="language-highlight CSS"><span class="selector-tag">body</span> {  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">"bg.jpg"</span>);}</code></pre><blockquote><p>background-repeat：用于设置背景图片是否重复，有以下属性值：</p></blockquote><ul><li>repeat：默认值，表示背景图像在水平方向和垂直方向上重复；</li><li>repeat-x：表示背景图像在水平方向上重复；</li><li>repeat-y：表示背景图像在垂直方向上重复；</li><li>no-repeat：表示背景图像不重复。</li></ul><pre class=" language-highlight CSS"><code class="language-highlight CSS"><span class="selector-tag">body</span> {  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">"bg.jpg"</span>);  <span class="attribute">background-repeat</span>: no-repeat;}</code></pre><blockquote><p>background-size：用于设置背景图片的大小，有以下属性值：</p></blockquote><ul><li>auto：默认值，表示背景图像的大小按照原始大小显示；</li><li>cover：背景图像尽可能覆盖整个容器；</li><li>contain：背景图像在保持原始宽高比的情况下尽可能覆盖整个容器；</li><li>length：用具体的长度值设置背景图像的大小；</li><li>percentage：用百分比设置背景图像的大小。</li></ul><pre class=" language-highlight CSS"><code class="language-highlight CSS"><span class="selector-tag">body</span> {  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">"bg.jpg"</span>);  <span class="attribute">background-size</span>: cover;}</code></pre><blockquote><p>background-position：用于设置背景图片的位置，有以下属性值：</p></blockquote><ul><li>left top：默认值，表示背景图像在容器的左上角；</li><li>left center：表示背景图像在容器的左侧居中；</li><li>left bottom：表示背景图像在容器的左下角；</li><li>center top：表示背景图像在容器的顶部居中；</li><li>center center：表示背景图像在容器的中心；</li><li>center bottom：表示背景图像在容器的底部居中；</li><li>right top：表示背景图像在容器的右上角；</li><li>right center：表示背景图像在容器的右侧居中；</li><li>right bottom：表示背景图像在容器的右下角。</li></ul><pre class=" language-highlight CSS"><code class="language-highlight CSS"><span class="selector-tag">body</span> {  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">"bg.jpg"</span>);  <span class="attribute">background-position</span>: center top;}</code></pre><blockquote><p>background-attachment：用于设置背景图片是否随着页面滚动，有以下属性值：</p></blockquote><ul><li>scroll：默认值，表示背景图像随着页面滚动；</li><li>fixed：表示背景图像不随着页面滚动。</li></ul><pre class=" language-highlight CSS"><code class="language-highlight CSS"><span class="selector-tag">body</span> {       <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">" "</span>);\n <span class="attribute">background-size</span>: cover;}"</code></pre>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2-css文本属性</title>
      <link href="/2023/09/03/2-css-wen-ben-shu-xing"/>
      <url>/2023/09/03/2-css-wen-ben-shu-xing</url>
      
        <content type="html"><![CDATA[<h2 id="CSS文本属性"><a href="#CSS文本属性" class="headerlink" title="CSS文本属性"></a>CSS文本属性</h2><p>在CSS中，我们可以通过文本属性来控制文字的样式。下面是一些常用的文本属性：</p><ul><li>font-family：用于指定文字的字体。</li><li>font-size：用于指定文字的大小。</li><li>font-style：用于指定文字的样式，例如italic或normal。</li><li>font-weight：用于指定文字的粗细程度。</li><li>color：用于指定文字的颜色。</li><li>text-align：用于指定文字的对齐方式，例如left、center或right。</li><li>text-decoration：用于指定文字的装饰，例如underline、line-through或none。</li></ul><p>下面是一些示例代码：</p><pre class=" language-highlight HTML"><code class="language-highlight HTML"><span class="meta"><!DOCTYPE <span class="keyword">html</span>></span><span class="tag"><<span class="name">html</span>></span>  <span class="tag"><<span class="name">head</span>></span>    <span class="tag"><<span class="name">style</span>></span><span class="language-css"></span><span class="language-css">      <span class="comment">/* 指定字体为Arial */</span></span><span class="language-css">      <span class="selector-tag">body</span> {</span><span class="language-css">        <span class="attribute">font-family</span>: Arial, sans-serif;</span><span class="language-css">      }</span><span class="language-css">      <span class="comment">/* 指定字体大小为16px */</span></span><span class="language-css">      <span class="selector-tag">h1</span> {</span><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><span class="language-css">      }</span><span class="language-css">      <span class="comment">/* 指定字体样式为italic */</span></span><span class="language-css">      <span class="selector-tag">em</span> {</span><span class="language-css">        <span class="attribute">font-style</span>: italic;</span><span class="language-css">      }</span><span class="language-css">      <span class="comment">/* 指定字体粗细程度为bold */</span></span><span class="language-css">      <span class="selector-tag">strong</span> {</span><span class="language-css">        <span class="attribute">font-weight</span>: bold;</span><span class="language-css">      }</span><span class="language-css">      <span class="comment">/* 指定文字颜色为蓝色 */</span></span><span class="language-css">      <span class="selector-tag">p</span> {</span><span class="language-css">        <span class="attribute">color</span>: blue;</span><span class="language-css">      }</span><span class="language-css">      <span class="comment">/* 指定文字居中对齐 */</span></span><span class="language-css">      <span class="selector-tag">div</span> {</span><span class="language-css">        <span class="attribute">text-align</span>: center;</span><span class="language-css">      }</span><span class="language-css">      <span class="comment">/* 给链接添加下划线 */</span></span><span class="language-css">      <span class="selector-tag">a</span> {</span><span class="language-css">        <span class="attribute">text-decoration</span>: underline;</span><span class="language-css">      }</span><span class="language-css">    </span><span class="tag"></<span class="name">style</span>></span>  <span class="tag"></<span class="name">head</span>></span>  <span class="tag"><<span class="name">body</span>></span>    <span class="tag"><<span class="name">h1</span>></span>这是一个标题<span class="tag"></<span class="name">h1</span>></span>    <span class="tag"><<span class="name">p</span>></span>这是一段普通的文本。<span class="tag"></<span class="name">p</span>></span>    <span class="tag"><<span class="name">p</span>></span><span class="tag"><<span class="name">em</span>></span>这是斜体的文本。<span class="tag"></<span class="name">em</span>></span><span class="tag"></<span class="name">p</span>></span>    <span class="tag"><<span class="name">p</span>></span><span class="tag"><<span class="name">strong</span>></span>这是粗体的文本。<span class="tag"></<span class="name">strong</span>></span><span class="tag"></<span class="name">p</span>></span>    <span class="tag"><<span class="name">p</span>></span>这是一段<span class="tag"><<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>></span>带有链接的文本<span class="tag"></<span class="name">a</span>></span>。<span class="tag"></<span class="name">p</span>></span>    <span class="tag"><<span class="name">div</span>></span>这是一段居中对齐的文本。<span class="tag"></<span class="name">div</span>></span>  <span class="tag"></<span class="name">body</span>></span><span class="tag"></<span class="name">html</span>></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1-css选择器</title>
      <link href="/2023/09/03/1-css-xuan-ze-qi"/>
      <url>/2023/09/03/1-css-xuan-ze-qi</url>
      
        <content type="html"><![CDATA[<h2 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h2><p>CSS选择器是CSS中的重要部分，用于选择要样式化的HTML元素。</p><p>CSS选择器的基本语法如下：</p><pre class=" language-highlight CSS"><code class="language-highlight CSS">selector {  property1: value1;  property2: value2;  <span class="comment">/*...*/</span>}</code></pre><p>其中，selector是用来选择HTML元素的选择器，property是CSS属性，value是CSS属性的值。下面是一些常见的CSS选择器和使用示例：</p><ul><li>标签选择器：选择HTML中所有的相应标签。</li></ul><pre class=" language-highlight CSS"><code class="language-highlight CSS"><span class="comment">/*选择所有p标签，并将其颜色设置为红色*/</span><span class="selector-tag">p</span> {  <span class="attribute">color</span>: red;}</code></pre><ul><li><p>类选择器：以”.”开头，选择HTML中具有相同类名的元素。</p><pre class=" language-highlight CSS"><code class="language-highlight CSS"><span class="comment">/*选择所有类名为"my-class"的元素，并将其背景颜色设置为黄色*/</span><span class="selector-class">.my-class</span> {  <span class="attribute">background-color</span>: yellow;}</code></pre></li><li><p>ID选择器：以”#”开头，选择HTML中具有相同id的元素。</p></li></ul><pre class=" language-highlight CSS"><code class="language-highlight CSS"><span class="comment">/*选择id为"my-id"的元素，并将其文字颜色设置为蓝色*/</span><span class="selector-id">#my-id</span> {  <span class="attribute">color</span>: blue;}</code></pre><ul><li><p>后代选择器：选择指定元素内的子元素。</p><pre class=" language-highlight CSS"><code class="language-highlight CSS"><span class="comment">/*选择div内所有p元素，并将其文字大小设置为20px*/</span><span class="selector-tag">div</span> <span class="selector-tag">p</span> {  <span class="attribute">font-size</span>: <span class="number">20px</span>;}</code></pre></li><li><p>相邻兄弟选择器：选择与指定元素相邻的兄弟元素。</p></li></ul><pre class=" language-highlight CSS"><span class="comment"><code class="language-highlight CSS"><span class="comment">/*选择所有ul后紧接着的p元素，并将其颜色设置为绿色*/</span><span class="selector-tag">ul</span> + <span class="selector-tag">p</span> {  <span class="attribute">color</span>: green;}</code></pre><ul><li>子元素选择器：选择指定元素的子元素。</li></ul><pre class=" language-highlight CSS"><code class="language-highlight CSS"><span class="comment">/*选择所有ul元素下的直接子元素li，并将其颜色设置为红色*/</span><span class="selector-tag">ul</span> > <span class="selector-tag">li</span> {  <span class="attribute">color</span>: red;}</code></pre><blockquote><p>以上是一些常见的CSS选择器，通过不同的选择器，可以对HTML元素进行更加灵活的样式控制。当然，除了选择器，CSS还有很多其他的语法和技巧，如盒模型、浮动、定位等等，需要逐步学习和掌握。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5-表单与表格元素</title>
      <link href="/2023/09/03/5-biao-dan-yu-biao-ge-yuan-su"/>
      <url>/2023/09/03/5-biao-dan-yu-biao-ge-yuan-su</url>
      
        <content type="html"><![CDATA[<h1 id="HTML表单元素和表格元素"><a href="#HTML表单元素和表格元素" class="headerlink" title="HTML表单元素和表格元素"></a>HTML表单元素和表格元素</h1><h3 id="表单元素"><a href="#表单元素" class="headerlink" title="表单元素"></a>表单元素</h3><blockquote><p>表单元素是网页与用户交互的一种方式，它允许用户输入信息并将其发送到服务器端进行处理。HTML提供了一些表单元素，用于创建表单界面，其中包括：</p></blockquote><ul><li>input：用于接收用户输入的各种数据，如文本、密码、日期、时间、文件等。</li><li>select：用于创建下拉菜单。</li><li>textarea：用于创建多行文本框。</li><li>button：用于创建按钮。</li><li>form：用于创建表单。</li></ul><h4 id="input元素"><a href="#input元素" class="headerlink" title="input元素"></a>input元素</h4><blockquote><p>input元素是HTML表单元素中最常用的元素之一，它可以接收各种类型的用户输入，例如文本、密码、日期、时间、文件等。下面是input元素常用的属性和类型：</p></blockquote><p>常用属性：</p><ul><li>type：指定input元素的类型，包括<strong>text、password、checkbox、radio、submit、reset、button、file</strong>等。</li><li>name：指定input元素的名称，用于表单提交时识别不同的元素。</li><li>value：指定input元素的值，通常用于默认值设置。</li><li>placeholder：指定input元素的占位符文本，提示用户输入内容的格式或意义。</li><li>disabled：指定input元素是否禁用。</li></ul><blockquote><p>文本输入框是input元素中最常用的类型之一，它允许用户输入单行文本数据。下面是一个文本输入框的示例代码：</p></blockquote><pre class=" language-highlight HTML"><code class="language-highlight HTML"><span class="tag"><<span class="name">label</span> <span class="attr">for</span>=<span class="string">"username"</span>></span>用户名：<span class="tag"></<span class="name">label</span>></span><span class="tag"><<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"username"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">placeholder</span>=<span class="string">"请输入用户名"</span> <span class="attr">required</span>></span> </code></pre><p>这里我们使用了label元素来标注输入框的名称，for属性指定了label和input元素的关联关系。另外，我们还使用了placeholder属性来指定输入框的占位符文本，用于提示用户输入内容的格式或意义。required属性指定输入框为必填项，当用户未填写时会有提示信息。</p><blockquote><p>密码输入框也是input元素的一种类型，它与文本输入框的区别在于输入内容会被隐藏。下面是一个密码输入框的示例代码：</p></blockquote><pre class=" language-highlight HTML"><code class="language-highlight HTML"><span class="tag"><<span class="name">label</span> <span class="attr">for</span>=<span class="string">"password"</span>></span>密码：<span class="tag"></<span class="name">label</span>></span><span class="tag"><<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">id</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">placeholder</span>=<span class="string">"请输入密码"</span> <span class="attr">required</span>></span></code></pre><p>这里我们同样使用了label元素来标注输入框的名称，for属性指定了label和input元素的关联关系。另外，我们还使用了placeholder属性来指定输入框的占位符文本，用于提示用户输入内容的格式或意义。required属性指定输入框为必填项，当用户未填写时会有提示信息。</p><p>除了文本输入框，表单还包括单选框、复选框、下拉框等元素，让用户能够更方便地提交信息。</p><p>单选框和复选框的HTML代码非常相似，主要区别在于单选框只允许用户选择其中的一个选项，而复选框则允许选择多个选项。</p><p>以下是单选框和复选框的示例代码：</p><pre class=" language-highlight HTML"><code class="language-highlight HTML"><span class="tag"><<span class="name">label</span>></span>单选框：<span class="tag"></<span class="name">label</span>></span><span class="tag"><<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">value</span>=<span class="string">"male"</span> <span class="attr">checked</span>></span>男<span class="tag"><<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">value</span>=<span class="string">"female"</span>></span>女<span class="tag"><<span class="name">label</span>></span>复选框：<span class="tag"></<span class="name">label</span>></span><span class="tag"><<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"fruit"</span> <span class="attr">value</span>=<span class="string">"apple"</span> <span class="attr">checked</span>></span>苹果<span class="tag"><<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"fruit"</span> <span class="attr">value</span>=<span class="string">"banana"</span>></span>香蕉<span class="tag"><<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"fruit"</span> <span class="attr">value</span>=<span class="string">"orange"</span>></span>橙子</code></pre><p>上面的代码中，单选框使用&lt;input&gt;标签，设置type=”radio”表示它是一个单选框，使用name属性来给单选框分组，同一组中的单选框只允许选择一个，使用value属性来设置单选框的值，用checked属性来设置默认选中的单选框。</p><p>复选框同理，使用&lt;input&gt;标签，设置type=”checkbox”表示它是一个复选框，同样使用name属性来给复选框分组，不同的是复选框允许多选，使用value属性来设置复选框的值，用checked属性来设置默认选中的复选框。</p><p>在表单提交时，表单元素的值可以通过JavaScript获取，以实现数据处理和交互效果。</p><p>除了上述表单元素，HTML还提供了许多其他类型的表单元素，如<strong>下拉框、文本域、按钮</strong>等。可以根据实际需求选择合适的表单元素来设计表单。</p><p>学习HTML表单元素时，需要<strong>了解各种表单元素的使用场景和相关属性</strong>，以便在实际开发中使用。同时，需要注意<strong>表单元素的布局和样式</strong>，以提高表单的可用性和用户体验。</p>]]></content>
      
      
      <categories>
          
          <category> Html </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4-多媒体元素</title>
      <link href="/2023/09/03/4-duo-mei-ti-yuan-su"/>
      <url>/2023/09/03/4-duo-mei-ti-yuan-su</url>
      
        <content type="html"><![CDATA[<h1 id="HTML-多媒体元素"><a href="#HTML-多媒体元素" class="headerlink" title="HTML 多媒体元素"></a>HTML 多媒体元素</h1><p>下面是一些常用的 HTML 多媒体标签：</p><p>1、**&lt;img&gt;** 标签：用于嵌入图片。</p><pre class=" language-highlight HTML"><code class="language-highlight HTML"><span class="tag"><<span class="name">img</span> <span class="attr">src</span>=<span class="string">"image.jpg"</span> <span class="attr">alt</span>=<span class="string">"图片"</span>></span> </code></pre><p>2、**&lt;video&gt;** 标签：用于嵌入视频。</p><pre class=" language-highlight HTML"><code class="language-highlight HTML"><span class="tag"><<span class="name">video</span> <span class="attr">width</span>=<span class="string">"320"</span> <span class="attr">height</span>=<span class="string">"240"</span> <span class="attr">controls</span>></span>    <span class="tag"><<span class="name">source</span> <span class="attr">src</span>=<span class="string">"video.mp4"</span> <span class="attr">type</span>=<span class="string">"video/mp4"</span>></span>    <span class="tag"><<span class="name">source</span> <span class="attr">src</span>=<span class="string">"video.ogg"</span> <span class="attr">type</span>=<span class="string">"video/ogg"</span>></span>    Your browser does not support the video tag.<span class="tag"></<span class="name">video</span>></span></code></pre><p>3、**&lt;audio&gt;** 标签：用于嵌入音频。</p><pre class=" language-highlight HTML"><code class="language-highlight HTML"><span class="tag"><<span class="name">audio</span> <span class="attr">controls</span>></span>  <span class="tag"><<span class="name">source</span> <span class="attr">src</span>=<span class="string">"music.mp3"</span> <span class="attr">type</span>=<span class="string">"audio/mpeg"</span>></span>  <span class="tag"><<span class="name">source</span> <span class="attr">src</span>=<span class="string">"music.ogg"</span> <span class="attr">type</span>=<span class="string">"audio/ogg"</span>></span>  Your browser does not support the audio element.<span class="tag"></<span class="name">audio</span>></span></code></pre><p>在使用多媒体标签时，我们需要注意以下几点：</p><ul><li>在使用 <strong>&lt;img&gt;</strong> 标签时，应该始终为 <em>alt</em> 属性设置一个有意义的值，以便于屏幕阅读器和搜索引擎等无法直接显示图片的工具理解图片内容。</li><li>在使用 <strong>&lt;video&gt;</strong> 和 <strong>&lt;audio&gt;</strong> 标签时，应该为标签设置 <em>controls</em> 属性，以便于用户能够控制媒体的播放和暂停等。</li><li>在使用 <strong>&lt;video&gt;</strong> 和 <strong>&lt;audio&gt;</strong> 标签时，应该提供多种格式的媒体文件，以便于不同浏览器和设备能够兼容播放。</li><li>在使用多媒体标签时，应该优化文件大小和加载速度，以提高网页的性能和用户体验。</li></ul><p>下面是一个使用多媒体标签的示例：</p><pre class=" language-highlight HTML"><span class="tag">&lt;<span class="name"><code class="language-highlight HTML"><span class="tag">&lt;<span class="name">html</span>></span>  <span class="tag"><<span class="name">head</span>></span>    <span class="tag"><<span class="name">title</span>></span>视频播放示例<span class="tag"></<span class="name">title</span>></span>  <span class="tag"></<span class="name">head</span>></span>  <span class="tag"><<span class="name">body</span>></span>    <span class="tag"><<span class="name">h1</span>></span>视频播放示例<span class="tag"></<span class="name">h1</span>></span>    <span class="tag"><<span class="name">video</span> <span class="attr">src</span>=<span class="string">"video.mp4"</span> <span class="attr">controls</span> <span class="attr">width</span>=<span class="string">"640"</span> <span class="attr">height</span>=<span class="string">"360"</span>></span>      您的浏览器不支持 video 标签。    <span class="tag"></<span class="name">video</span>></span>    <span class="tag"><<span class="name">h2</span>></span>音频播放示例<span class="tag"></<span class="name">h2</span>></span>    <span class="tag"><<span class="name">audio</span> <span class="attr">src</span>=<span class="string">"audio.mp3"</span> <span class="attr">controls</span>></span>      您的浏览器不支持 audio 标签。    <span class="tag"></<span class="name">audio</span>></span>  <span class="tag"></<span class="name">body</span>></span><span class="tag"></<span class="name">html</span>></span></code></pre><p>在实际开发中，媒体元素的应用非常广泛，例如在网站中加入介绍视频、音频背景等等，都可以使用媒体元素来实现。同时，<strong>需要注意优化媒体文件大小，以提高页面加载速度。</strong></p>]]></content>
      
      
      <categories>
          
          <category> Html </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3-html语义化标签及常用布局元素</title>
      <link href="/2023/09/03/3-html-yu-yi-hua-biao-qian-ji-chang-yong-bu-ju-yuan-su"/>
      <url>/2023/09/03/3-html-yu-yi-hua-biao-qian-ji-chang-yong-bu-ju-yuan-su</url>
      
        <content type="html"><![CDATA[<h1 id="HTML语义化标签"><a href="#HTML语义化标签" class="headerlink" title="HTML语义化标签"></a>HTML语义化标签</h1><p>一些常用的HTML语义化标签及其作用：</p><ul><li>**&lt;header&gt;**：定义文档或节的页眉。</li><li>**&lt;nav&gt;**：定义导航链接。</li><li>**&lt;main&gt;**：定义文档的主体内容。</li><li>**&lt;article&gt;**：定义一个可以独立展示或分发的内容块，比如新闻文章、博客文章等。</li><li>**&lt;aside&gt;**：定义一个页面或文章的旁注栏，比如侧边栏、广告等。</li><li>**&lt;footer&gt;**：定义文档或节的页脚。</li></ul><p>1、如何正确使用语义化标签？</p><blockquote><p>在编写HTML时，应该根据文档的结构和内容选择合适的语义化标签。比如在编写一个新闻页面时，可以使用&lt;header&gt;标签定义标题和作者信息，&lt;nav&gt;标签定义导航链接，&lt;article&gt;标签定义文章内容等等。</p></blockquote><p>2、如何避免过度使用语义化标签？</p><blockquote><p>虽然使用语义化标签能够提高网页的可读性和可维护性，但过度使用也会造成代码冗余和不必要的复杂性。在编写HTML时，应该根据具体情况选择合适的标签，避免过度使用语义化标签。</p></blockquote><p>3、 如何兼容老旧浏览器？</p><blockquote><p>有些老旧的浏览器可能不支持HTML5的语义化标签，这时可以使用JavaScript或CSS来实现相应的效果。比如可以使用JavaScript将&lt;section&gt;标签转换为&lt;div&gt;标签，或使用CSS为语义化标签添加样式。</p></blockquote><p>以下是一个示例代码，演示如何使用HTML语义化标签来构建一个简单的网页结构：</p><pre class=" language-highlight HTML"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string"><code class="language-highlight HTML"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>></span>  <span class="tag"><<span class="name">head</span>></span>    <span class="tag"><<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /></span>    <span class="tag"><<span class="name">title</span>></span>HTML 语义化标签示例<span class="tag"></<span class="name">title</span>></span>  <span class="tag"></<span class="name">head</span>></span>  <span class="tag"><<span class="name">body</span>></span>    <span class="tag"><<span class="name">header</span>></span>      <span class="tag"><<span class="name">h1</span>></span>网站标题<span class="tag"></<span class="name">h1</span>></span>      <span class="tag"><<span class="name">nav</span>></span>        <span class="tag"><<span class="name">ul</span>></span>          <span class="tag"><<span class="name">li</span>></span><span class="tag"><<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>></span>首页<span class="tag"></<span class="name">a</span>></span><span class="tag"></<span class="name">li</span>></span>          <span class="tag"><<span class="name">li</span>></span><span class="tag"><<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>></span>关于我们<span class="tag"></<span class="name">a</span>></span><span class="tag"></<span class="name">li</span>></span>          <span class="tag"><<span class="name">li</span>></span><span class="tag"><<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>></span>联系我们<span class="tag"></<span class="name">a</span>></span><span class="tag"></<span class="name">li</span>></span>        <span class="tag"></<span class="name">ul</span>></span>      <span class="tag"></<span class="name">nav</span>></span>    <span class="tag"></<span class="name">header</span>></span>    <span class="tag"><<span class="name">main</span>></span>      <span class="tag"><<span class="name">section</span>></span>        <span class="tag"><<span class="name">h2</span>></span>最新消息<span class="tag"></<span class="name">h2</span>></span>        <span class="tag"><<span class="name">article</span>></span>          <span class="tag"><<span class="name">h3</span>></span>文章标题<span class="tag"></<span class="name">h3</span>></span>          <span class="tag"><<span class="name">p</span>></span>文章内容<span class="tag"></<span class="name">p</span>></span>        <span class="tag"></<span class="name">article</span>></span>        <span class="tag"><<span class="name">article</span>></span>          <span class="tag"><<span class="name">h3</span>></span>文章标题<span class="tag"></<span class="name">h3</span>></span>          <span class="tag"><<span class="name">p</span>></span>文章内容<span class="tag"></<span class="name">p</span>></span>        <span class="tag"></<span class="name">article</span>></span>      <span class="tag"></<span class="name">section</span>></span>      <span class="tag"><<span class="name">aside</span>></span>        <span class="tag"><<span class="name">h2</span>></span>侧边栏<span class="tag"></<span class="name">h2</span>></span>        <span class="tag"><<span class="name">ul</span>></span>          <span class="tag"><<span class="name">li</span>></span><span class="tag"><<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>></span>热门文章<span class="tag"></<span class="name">a</span>></span><span class="tag"></<span class="name">li</span>></span>          <span class="tag"><<span class="name">li</span>></span><span class="tag"><<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>></span>推荐文章<span class="tag"></<span class="name">a</span>></span><span class="tag"></<span class="name">li</span>></span>        <span class="tag"></<span class="name">ul</span>></span>      <span class="tag"></<span class="name">aside</span>></span>    <span class="tag"></<span class="name">main</span>></span>    <span class="tag"><<span class="name">footer</span>></span>      <span class="tag"><<span class="name">p</span>></span><span class="symbol">&copy;</span>2021 HTML 语义化标签示例<span class="tag"></<span class="name">p</span>></span>    <span class="tag"></<span class="name">footer</span>></span>  <span class="tag"></<span class="name">body</span>></span><span class="tag"></<span class="name">html</span>></span></code></pre><p>在这个示例中，我们使用了 HTML5 中新增的语义化标签，包括：</p><ul><li>&lt;header&gt;：网页的头部区域，通常包括网站的标题、导航栏等内容。</li><li>&lt;nav&gt;：用于定义导航链接的区域。</li><li>&lt;main&gt;：网页的主要内容区域。</li><li>&lt;section&gt;：网页中的一个主要部分，比如新闻列表、文章列表等。</li><li>&lt;article&gt;：网页中的一篇文章或一段独立的内容。</li><li>&lt;aside&gt;：网页的侧边栏区域。</li><li>&lt;footer&gt;：网页的底部区域，通常包括版权信息、联系方式等内容。</li></ul><p>使用语义化标签可以让网页的结构更加清晰，便于搜索引擎的抓取和理解。另外，还可以通过 CSS 样式来针对不同的语义化标签设置样式，提高网页的可读性和可访问性。</p><p>问题：</p><p>1、 语义化标签不被某些浏览器支持</p><blockquote><p>解决办法：可以使用Polyfill或者Modernizr等库来提供兼容性。</p></blockquote><p>2、部分标签的样式难以调整</p><blockquote><p>解决办法：可以在语义化标签中添加class属性，并在CSS中对这些类进行样式定义，这样可以很好地解决样式问题。</p></blockquote><p>3、 在使用语义化标签时，有些标签语义不明显，不易于理解</p><blockquote><p>解决办法：应该注意学习和了解HTML5规范中语义化标签的用法，掌握其语义。</p></blockquote><p>4、 考虑到兼容性问题，在一些场景下可能需要使用非语义化标签</p><blockquote><p>解决办法：在必要的情况下可以使用非语义化标签，但需要注意控制数量，尽量减少使用。同时，在使用非语义化标签时，应该为其添加合适的class和id属性，以便于CSS样式控制。</p></blockquote><pre class=" language-highlight HTML"><span class="tag">&lt;<span class="name"><code class="language-highlight HTML"><span class="tag">&lt;<span class="name">header</span>></span>  <span class="tag"><<span class="name">h1</span>></span>这是一个标题<span class="tag"></<span class="name">h1</span>></span>  <span class="tag"><<span class="name">nav</span>></span>    <span class="tag"><<span class="name">ul</span>></span>      <span class="tag"><<span class="name">li</span>></span><span class="tag"><<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>></span>首页<span class="tag"></<span class="name">a</span>></span><span class="tag"></<span class="name">li</span>></span>      <span class="tag"><<span class="name">li</span>></span><span class="tag"><<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>></span>关于我们<span class="tag"></<span class="name">a</span>></span><span class="tag"></<span class="name">li</span>></span>      <span class="tag"><<span class="name">li</span>></span><span class="tag"><<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>></span>联系我们<span class="tag"></<span class="name">a</span>></span><span class="tag"></<span class="name">li</span>></span>    <span class="tag"></<span class="name">ul</span>></span>  <span class="tag"></<span class="name">nav</span>></span><span class="tag"></<span class="name">header</span>></span><span class="tag"><<span class="name">main</span>></span>  <span class="tag"><<span class="name">article</span>></span>    <span class="tag"><<span class="name">header</span>></span>      <span class="tag"><<span class="name">h2</span>></span>这是一篇文章的标题<span class="tag"></<span class="name">h2</span>></span>      <span class="tag"><<span class="name">p</span>></span>作者：John Doe<span class="tag"></<span class="name">p</span>></span>      <span class="tag"><<span class="name">p</span>></span>发布日期：2023年5月12日<span class="tag"></<span class="name">p</span>></span>    <span class="tag"></<span class="name">header</span>></span>    <span class="tag"><<span class="name">section</span>></span>      <span class="tag"><<span class="name">p</span>></span>这是文章的内容。<span class="tag"></<span class="name">p</span>></span>      <span class="tag"><<span class="name">p</span>></span>这是文章的内容。<span class="tag"></<span class="name">p</span>></span>    <span class="tag"></<span class="name">section</span>></span>    <span class="tag"><<span class="name">footer</span>></span>      <span class="tag"><<span class="name">p</span>></span>版权所有：XXX公司<span class="tag"></<span class="name">p</span>></span>    <span class="tag"></<span class="name">footer</span>></span>  <span class="tag"></<span class="name">article</span>></span>  <span class="tag"><<span class="name">aside</span>></span>    <span class="tag"><<span class="name">h3</span>></span>相关文章<span class="tag"></<span class="name">h3</span>></span>    <span class="tag"><<span class="name">ul</span>></span>      <span class="tag"><<span class="name">li</span>></span><span class="tag"><<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>></span>文章1<span class="tag"></<span class="name">a</span>></span><span class="tag"></<span class="name">li</span>></span>      <span class="tag"><<span class="name">li</span>></span><span class="tag"><<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>></span>文章2<span class="tag"></<span class="name">a</span>></span><span class="tag"></<span class="name">li</span>></span>      <span class="tag"><<span class="name">li</span>></span><span class="tag"><<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>></span>文章3<span class="tag"></<span class="name">a</span>></span><span class="tag"></<span class="name">li</span>></span>    <span class="tag"></<span class="name">ul</span>></span>  <span class="tag"></<span class="name">aside</span>></span><span class="tag"></<span class="name">main</span>></span><span class="tag"><<span class="name">footer</span>></span>  <span class="tag"><<span class="name">p</span>></span>版权所有：XXX公司<span class="tag"></<span class="name">p</span>></span><span class="tag"></<span class="name">footer</span>></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Html </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2-html组成</title>
      <link href="/2023/09/03/2-html-zu-cheng"/>
      <url>/2023/09/03/2-html-zu-cheng</url>
      
        <content type="html"><![CDATA[<h1 id="HTML组成"><a href="#HTML组成" class="headerlink" title="HTML组成"></a>HTML组成</h1><p>HTML是超文本标记语言（<em><strong>HyperText Markup Language</strong></em>）的缩写，它是用于构建网页的基本语言之一。HTML由一系列标签（<strong>tag</strong>）组成，标签用于描述网页的结构和内容。</p><p>以下是HTML的基本组成部分：</p><blockquote><p>DOCTYPE声明：这是HTML文档的第一行，用于指定文档类型。例如：</p></blockquote><pre class=" language-highlight HTML"><span class="meta">&lt;!DOCTYPE <span class="keyword"><code class="language-highlight HTML"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>></span></code></pre><blockquote><p>HTML标签：HTML文档中的所有内容都需要包含在HTML标签中。HTML标签由开始标签和结束标签组成，例如：</p></blockquote><pre class=" language-highlight HTML"><span class="tag">&lt;<span class="name"><code class="language-highlight HTML"><span class="tag">&lt;<span class="name">html</span>></span>  <span class="comment"><!-- 此处为页面内容 --></span><span class="tag"></<span class="name">html</span>></span></code></pre><blockquote><p>Head标签：Head标签用于定义文档的元数据，例如页面标题、编码方式等。Head标签位于HTML标签内，例如：</p></blockquote><pre class=" language-highlight HTML"><span class="tag">&lt;<span class="name"><code class="language-highlight HTML"><span class="tag">&lt;<span class="name">head</span>></span>  <span class="tag"><<span class="name">title</span>></span>我的网页<span class="tag"></<span class="name">title</span>></span>  <span class="tag"><<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>></span><span class="tag"></<span class="name">head</span>></span></code></pre><blockquote><p>Body标签：Body标签用于定义页面的主体内容，例如：</p></blockquote><pre class=" language-highlight HTML"><span class="tag">&lt;<span class="name"><code class="language-highlight HTML"><span class="tag">&lt;<span class="name">body</span>></span>  <span class="tag"><<span class="name">h1</span>></span>欢迎来到我的网页<span class="tag"></<span class="name">h1</span>></span>  <span class="tag"><<span class="name">p</span>></span>这是我的第一个网页。<span class="tag"></<span class="name">p</span>></span><span class="tag"></<span class="name">body</span>></span></code></pre><blockquote><p>下面是一个完整的HTML示例代码：</p></blockquote><pre class=" language-highlight HTML"><span class="meta">&lt;!DOCTYPE <span class="keyword"><code class="language-highlight HTML"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>></span><span class="tag"><<span class="name">html</span>></span>  <span class="tag"><<span class="name">head</span>></span>    <span class="tag"><<span class="name">title</span>></span>我的网页<span class="tag"></<span class="name">title</span>></span>    <span class="tag"><<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>></span>  <span class="tag"></<span class="name">head</span>></span>  <span class="tag"><<span class="name">body</span>></span>    <span class="tag"><<span class="name">h1</span>></span>欢迎来到我的网页<span class="tag"></<span class="name">h1</span>></span>    <span class="tag"><<span class="name">p</span>></span>这是我的第一个网页。<span class="tag"></<span class="name">p</span>></span>    <span class="tag"><<span class="name">img</span> <span class="attr">src</span>=<span class="string">"myimage.png"</span> <span class="attr">alt</span>=<span class="string">"我的图片"</span>></span>  <span class="tag"></<span class="name">body</span>></span><span class="tag"></<span class="name">html</span>></span></code></pre><blockquote><p>在实际开发中，需要注意HTML的语义化，即使用恰当的标签描述内容的结构和意义，以便浏览器、搜索引擎和其他设备更好地理解和解析页面内容。例如，使用标题标签（<strong>h1~h6</strong>）描述页面标题，使用段落标签（<strong>p</strong>）描述段落内容，使用列表标签（<strong>ul、ol、li</strong>）描述列表等。</p></blockquote><blockquote><p>同时，还需要注意布局元素的使用，例如<strong>div、span、section、article、nav</strong>等，它们用于将页面内容划分为更加具有语义的区域，并进行样式和布局设置。</p></blockquote><blockquote><p>最后，多媒体元素和表单元素是构建丰富交互体验的关键。例如，使用视频标签（<strong>video</strong>）和音频标签（<strong>audio</strong>）嵌入视频和音频内容，使用表单标签（<strong>form</strong>）、输入框标签（<strong>input</strong>）、下拉框标签（<strong>select</strong>）等实现数据的输入、提交和验证。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Html </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.html基础</title>
      <link href="/2023/09/03/1-html-ji-chu"/>
      <url>/2023/09/03/1-html-ji-chu</url>
      
        <content type="html"><![CDATA[<h1 id="HTML基础"><a href="#HTML基础" class="headerlink" title="HTML基础"></a>HTML基础</h1><h2 id="HTML组成"><a href="#HTML组成" class="headerlink" title="HTML组成"></a>HTML组成</h2><blockquote><p>HTML 文档由标签和内容组成。标签用于定义网页内容的结构，而内容则是标签中的文本和其他元素。</p></blockquote><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><blockquote><p>HTML 标签用尖括号括起来，如 <strong>&lt;html&gt;、&lt;head&gt;、&lt;title&gt;、&lt;body&gt;</strong> 等等。每个标签都有一个起始标签和结束标签，例如 <strong>&lt;p&gt;</strong> 和 **&lt;/p&gt;**。一些标签也可以只有一个自闭合标签，例如 **&lt;img&gt;**。</p></blockquote><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><blockquote><p>HTML 标签可以有属性，属性可以用来指定标签的某些特性，例如 <em><strong>id、class、style</strong></em> 等等。属性的格式为 <em><strong>属性名</strong></em>=”<strong>属性值</strong>“。</p></blockquote><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><blockquote><p>HTML 注释以 <strong>&lt;!–</strong> 开头，以 <strong>–&gt;</strong> 结尾，可以用于添加注释或调试信息。</p></blockquote><h2 id="HTML-语义化"><a href="#HTML-语义化" class="headerlink" title="HTML 语义化"></a>HTML 语义化</h2><blockquote><p><strong>HTML</strong> 语义化是指使用具有语义的标签来编写 <strong>HTML</strong>，以便于浏览器、搜索引擎和开发人员理解页面内容。</p></blockquote><blockquote><p>例如，使用 <strong>&lt;header&gt;</strong> 标签表示网页的页眉，使用 <strong>&lt;nav&gt;</strong> 标签表示导航栏，使用 <strong>&lt;main&gt;</strong> 标签表示主要内容区域等等。</p></blockquote><h2 id="布局元素"><a href="#布局元素" class="headerlink" title="布局元素"></a>布局元素</h2><p>HTML 提供了一些用于布局的元素，包括：</p><ul><li>**&lt;div&gt;**：通常用于组织网页结构或添加样式。</li><li>**&lt;span&gt;**：类似于 &lt;div&gt;，但通常用于内联元素。</li><li>**&lt;section&gt;**：表示文档中的一个章节。</li><li>**&lt;article&gt;**：表示文档中的一个独立文章。</li><li>**&lt;aside&gt;**：表示文档中的侧边栏内容。</li><li>**&lt;header&gt;**：表示文档中的页眉。</li><li>**&lt;footer&gt;**：表示文档中的页脚。</li><li>**&lt;nav&gt;**：表示文档中的导航栏。</li></ul><h2 id="多媒体元素"><a href="#多媒体元素" class="headerlink" title="多媒体元素"></a>多媒体元素</h2><p>HTML 提供了一些用于添加多媒体内容的元素，包括：</p><ul><li>&lt;img&gt;：用于添加图片。</li><li>&lt;video&gt;：用于添加视频。</li><li>&lt;audio&gt;：用于添加音频。</li><li>&lt;canvas&gt;：用于绘制图形。</li><li>&lt;svg&gt;：用于绘制矢量图形。</li></ul><h2 id="表单元素"><a href="#表单元素" class="headerlink" title="表单元素"></a>表单元素</h2><p>HTML 提供了一些用于创建表单的元素，包括：</p><ul><li>**&lt;form&gt;**：用于创建表单。</li><li>**&lt;input&gt;**：用于添加输入框、单选框、复选框、文件选择框等等。</li><li>**&lt;textarea&gt;**：用于添加文本框。</li><li>**&lt;select&gt;**：用于添加下拉框。</li><li>**&lt;button&gt;**：用于添加按钮。</li></ul><h2 id="表格元素"><a href="#表格元素" class="headerlink" title="表格元素"></a>表格元素</h2><p>常用的表格元素包括：</p><ul><li>**&lt;table&gt;**：元素用于定义表格，可以设置表格的属性，例如边框线宽度、单元格之间的间距等等。</li><li>**&lt;thead&gt;**：元素用于划分表格的页眉。</li><li>**&lt;tbody&gt;**：元素用于划分表格的主体。</li><li>**&lt;tfoot&gt;**：元素用于划分表格的页脚。</li><li>**&lt;tr&gt;**：元素用于定义表格中的行。</li><li>**&lt;th&gt;**：元素通常用于定义表格中的表头单元格。</li><li>**&lt;td&gt;**：元素用于定义表格中的数据单元格。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Html </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript-learn</title>
      <link href="/2023/08/17/javascript-learn"/>
      <url>/2023/08/17/javascript-learn</url>
      
        <content type="html"><![CDATA[<hr><h1 id="js笔记"><a href="#js笔记" class="headerlink" title="js笔记"></a>js笔记</h1><h2 id="js初识and学习资源"><a href="#js初识and学习资源" class="headerlink" title="js初识and学习资源"></a>js初识and学习资源</h2><h3 id="W3school"><a href="#W3school" class="headerlink" title="W3school"></a>W3school</h3><p>More info: <a href="https://www.w3school.com.cn/js/index.asp">project</a></p><h3 id="MDN-Web-Docs"><a href="#MDN-Web-Docs" class="headerlink" title="MDN Web Docs"></a>MDN Web Docs</h3><p>More info: <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript">project</a></p>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github.io部署个人博客</title>
      <link href="/2023/07/07/github-bo-ke"/>
      <url>/2023/07/07/github-bo-ke</url>
      
        <content type="html"><![CDATA[<h1 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h1><h2 id="开始学习"><a href="#开始学习" class="headerlink" title="开始学习"></a>开始学习</h2><h3 id="学习项目"><a href="#学习项目" class="headerlink" title="学习项目"></a>学习项目</h3><p>More info: <a href="https://juejin.cn/post/7064515729298554887">project</a></p><h1 id="git同时管理多个GitHub账号踩坑"><a href="#git同时管理多个GitHub账号踩坑" class="headerlink" title="git同时管理多个GitHub账号踩坑"></a>git同时管理多个GitHub账号踩坑</h1><h2 id="参考的项目"><a href="#参考的项目" class="headerlink" title="参考的项目"></a>参考的项目</h2><p>More info: <a href="https://doreality.xyz/posts/9fda10db.html">project 1</a></p><p>这是比较早期的项目，在config的设置时，刚开始可以”hexo d”第一次部署成功，之后还是会报错,需要设置config中的【user】（只在mac中有用），同时要将全局配置 config global 取消掉（windows只有取消，才能在参考二中配置成功，windows的【user】个人感觉并没有用）。</p><p><img src="/2023/07/07/github-bo-k/error1.png" alt="本地图片"></p><p>参考以下文章配置config，在ssh密钥文件夹下和.git文件夹下，并且在hexo 根目录下config配置好在ssh   config中的host,即在@后的名字。</p><p>More info: <a href="https://zhuanlan.zhihu.com/p/107341502#:~:text=%E4%B8%80%E5%8F%B0%E7%94%B5%E8%84%91%E5%8F%8CGitHub%E8%B4%A6%E6%88%B7%E9%85%8D%E7%BD%AE%201%200.%20%E5%89%8D%E8%A8%80%20%E4%B8%8D%E7%9F%A5%E6%98%AF%E5%90%A6%E6%9C%89%E4%BA%BA%E5%83%8F%E6%88%91%E4%B8%80%E6%A0%B7%EF%BC%8C%E6%90%9E%E4%BA%86%E4%B8%A4%E4%B8%AAGitHub%E8%B4%A6%E5%8F%B7%EF%BC%8C%E4%B8%80%E4%B8%AA%E7%94%A8%E6%9D%A5%E6%AD%A3%E5%B8%B8%E7%9A%84%E5%92%8C%E5%88%AB%E4%BA%BA%E5%90%88%E4%BD%9C%E9%A1%B9%E7%9B%AE%EF%BC%8C%E5%8F%A6%E4%B8%80%E4%B8%AA%E7%94%A8%E6%9D%A5%E8%87%AA%E5%B7%B1%E5%86%99%E4%B8%80%E4%BA%9B%E4%BB%A3%E7%A0%81%EF%BC%8C%E5%B8%8C%E6%9C%9B%E8%83%BD%E5%81%9A%E5%88%B0%E4%B8%A4%E4%B8%AA%E6%9C%AC%E5%9C%B0%E8%B4%A6%E6%88%B7%E5%92%8C%E8%BF%9C%E7%A8%8B%E8%B4%A6%E5%8F%B7%E9%83%BD%E5%AE%8C%E5%85%A8%E9%9A%94%E7%A6%BB%EF%BC%8C%E6%B2%A1%E6%9C%89%E8%81%94%E7%B3%BB%EF%BC%8C%E4%B9%9F%E4%B8%8D%E4%BC%9A%E8%A2%AB%E6%B7%B7%E6%B7%86%E4%BD%BF%E7%94%A8%E3%80%82%20...%202%201.,3.%20%E9%85%8D%E7%BD%AE%E4%BB%93%E5%BA%93%E8%AE%BE%E7%BD%AE%20%E9%A6%96%E5%85%88%E8%A6%81%E5%88%A0%E9%99%A4GIT%E9%85%8D%E7%BD%AE%E7%9A%84%E5%85%A8%E5%B1%80%E7%94%A8%E6%88%B7%E5%90%8D%E5%92%8C%E9%82%AE%E4%BB%B6%E5%9C%B0%E5%9D%80%EF%BC%8C%E6%8E%A5%E7%9D%80%E5%9C%A8%E6%AF%8F%E4%B8%AA%E9%A1%B9%E7%9B%AE%E4%BB%93%E5%BA%93%E4%B8%AD%E6%8C%89%E7%85%A7%E9%9C%80%E6%B1%82%E8%AE%BE%E7%BD%AE%E4%B8%8D%E5%90%8C%E7%9A%84%20user.name%20%E5%92%8C%20user.email%20%EF%BC%9A%20">project 2</a></p><p><img src="/2023/07/07/github-bo-k/pz.png" alt="本地图片"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>在项目二的顺序是非常合适的：</p><h2 id="1、生成密钥"><a href="#1、生成密钥" class="headerlink" title="1、生成密钥"></a>1、生成密钥</h2><p>使用到的代码</p><p>生成了一对秘钥public</p><pre class=" language-highlight bash"><code class="language-highlight bash">ssh-keygen -t rsa -C “youremail@gmail.com”</code></pre><p>再用另一个邮箱生成一对 private 的秘钥</p><pre class=" language-highlight bash"><code class="language-highlight bash">ssh-keygen -t rsa -C “private_email@gmail.com”</code></pre><p>要注意重命名，否则会覆盖上面的密钥文件。假设我们生成了一对新的秘钥private 和private.pub。</p><p>然后分别将这两对密钥加入到对应的 GitHub 账户中。</p><h2 id="2、编辑配置文件"><a href="#2、编辑配置文件" class="headerlink" title="2、编辑配置文件"></a>2、编辑配置文件</h2><p>这个public，虽然并没有像第二个配置了 hexo 根目录下的@后的github_config，但是可能在ssh  config之中在第一位，在没有了全局global的配置下，可能为第一个为默认。</p><p>编辑~/.ssh/config文件。如果该文件不存在的话，直接创建一个就好。里面的内容如下：</p><pre class=" language-highlight bash"><span class="comment"><code class="language-highlight bash"><span class="comment"># 公共</span>Host github_publicHostname ssh.github.comIdentityFile ~/.ssh/id_rsaport 22<span class="comment">#个人</span>Host github_privateHostname ssh.github.comIdentityFile ~/.ssh/privateport 22</code></pre><p>先把两个公钥添加到对应的 GitHub 账户，再进行下面的 ssh 连接测试，否则肯定是连接不上，会显示 permission denied。</p><pre class=" language-highlight bash"><code class="language-highlight bash">ssh -T git@github_publicssh -T git@github_private</code></pre><p>如果都能正常返回如下信息，就说明配置正常。</p><pre class=" language-highlight bash">Hi xxx! You<span class="string"><code class="language-highlight bash">Hi xxx! You<span class="string">'ve successfully authenticated, but GitHub does not provide shell access.</span></code></pre><h2 id="3、配置仓库设置"><a href="#3、配置仓库设置" class="headerlink" title="3、配置仓库设置"></a>3、配置仓库设置</h2><p>在本次踩坑中为hexo根目录下，没有如（项目一）中config配置一样的名字。</p><p>首先要删除GIT配置的全局用户名和邮件地址，接着在每个项目仓库中按照需求设置不同的user.name和 user.email：</p><pre class=" language-highlight bash"><span class="comment"><code class="language-highlight bash"><span class="comment"># 删除全局设置</span>git config --global --<span class="built_in">unset</span> user.namegit config --global --<span class="built_in">unset</span> user.email<span class="comment"># 添加本地设置</span><span class="comment"># 设置为私有仓库的GitHub账号邮箱和公有账号的GitHub邮箱。</span>git config --<span class="built_in">local</span> user.name xxxxgit config --<span class="built_in">local</span> user.email xxx</code></pre><p>在添加本地配置时，可能会失败，有可能因为当前目录下没有.git文件夹，所以可以当clone时在使用。</p><p>之后在添加远程仓库的时候，把github.com 修改成github_public 或者github_private就好了（即上述文件中的HOST选项），用上面两个 Host 名称来代替原来的github.com ，（这一步很重要）如：</p><pre class=" language-highlight bash"><span class="comment"><code class="language-highlight bash"><span class="comment"># public user</span>git remote add origin git@github_public:xxx/example.git<span class="comment"># priavate user</span>git remote add origin git@github_private:xxx/example.git</code></pre><p>其实，上面的配置文件的意思就是，按照你设置远程仓库时使用不同的 Host 名称，查找~/.ssh/config文件，使用不同的 SSH 文件连接到 GitHub。这样你就将是以不同的身份访问 GitHub 仓库。</p><p>这个可能是，在本地写完代码时提交GitHub时使用，比如git init 之后，git remote链接到GitHub时使用，才有账号push。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>about</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
